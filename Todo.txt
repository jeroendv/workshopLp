# todo: replace all LP model instances with MILP instances!

# todo: ensure that parameters have default values.
# This way new models that contain extra parameters can still be used in 
# conjunction with older data files. The problem is that the older data 
# files don't assign anything to those extra parameters because they 
# weren't known about at the time the data file was generated.  

# wishlist: gnumathprog extension file inclusion and overloading.
# At the moment I have a problem that the model.<x+1> is only a small 
# change compared to model.<x>. Lots of code is very similar and hence 
# proper coding demands that you seperate the code to a seperate file or 
# location and reuse it, so that there is no code duplication. 
#
# gnu mathprog doesn't have a sort of include direction  or import 
# statement or something similar to include a file in an other file.
#
# an other problem is that inclusion is not always enough, sometimes you 
# don't only add constrains  but also change them ever so slightly. So 
# you also need some kind of overloading concept where a newer 
# constraints replaces an older contraint of identical name.
#
# These tho concepts would allow me to reuse common contraints  the way 
# it should, i.e., by importing instead of copy pasting.
# Maintianing would also be much easier!!
#
# an include directive could easily enough be done with a perl script!
# The overloading concept would be much harder though because it 
# requires that the model is properly interpreted and an in memory 
# representation should be build and then printed, while an include 
# directive would simply print lines without any knowledge of the 
# content of those lines a part of the ability to recognize an the 
# include directive itself.
#

# todo: make later model backward compatible with earlier models by
# giving newly introduced parameters a default value, so that they can
# process data files intended for earlier model description.
# todo: make earlier model forward compatible by declaring the
# parameters that they don't use, but thus ensuring that they can solve
# data files intended for later model files. (the import directive and
# overloading capability would make maintining all these models so much
# easier!!)

# todo: use the ReserveChoiceCost parameter to scale the reserve choice
# cost. It is done in some models, but not in all.

# todo: copy the default value of for OverbookingsCost in model.9 to
# the other models

# todo: provide test/test1 with some info to make it usefull
# + set a Readme.md in the test/test1 directory.
#  * what is imporant about the test
#  * what should be tested
#  * what do we want to illustrate with
# + create a bash script to run the test and 

# todo: can it be that a time limit results in an infeasible solution?
# If so than I need to explicitly check the solution afterwards!?

# todo: post processing in a different file(2012/11/15)
# can't post processing be done in a file seperate from the model
# description. Depending on the goal one would like to reuse a model
# desctription but do different post processing on the results!!!
#
# The most promimant example would be in test/testx/

# todo: only generate constraints if needed (2012/11/15)
# if a parameter is set to zero making certain constraint meaningless,
# then I also shouldn't generate those constraints!! 
#
# For example if UnbalancedLoadCost == 0, then the goal function won't
# be affected by an unbalance. The preprocessing step won't however
# notice this and won't eliminate the constraints related to
# balancing. Hence the model will have unneeded constraints which will
# unnecessarily slow down the solver.

